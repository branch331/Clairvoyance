I want an application that has to-do list functionality, that I can also use to track and visualise how much time I spend on specific tasks. 

I find myself using sticky notes as my 'To-Do' list. I also use sticky notes to track how much 'time' i spend on each task, and add everything in the end to know how much time i've spent so far.

I don't want to spend the end of each week doing math to find how much time i've spent on certain tasks.

I also don't want to use sticky notes as my to-do list because once it's deleted from the note, it's gone. 

I want a to-do list that has calendar-esque functionality so I can plan out my day and week as well. But I don't want to bog down my outlook calendar. 

In the end, I want a lightweight/simplistic version of:
-Calendar functionality of Outlook
-To-do features similar to Trello
-Ability to add timeframes/easy UI, and time tracking as Azure DevOps
-Speed/simplicity of Sticky Notes

[Must-do]
[DONE] Display days on UI - have days/tasks fill entire datagrid
[DONE] Add "day" input field on UI >> Submit task to day
[DONE] Display tasks in days
[DONE] Checkbox should trigger DaysToDisplay to display work week or full week
*Store days/task data in db 
*Store hourly totals by WEEK ID, and by OVERALL (week ID)
[DONE] Category - generate and add items to list; populate drop-down
[DONE-ish] Please fix updateTaskListStrings; add logic to decide which task string list to update
[DONE] Add unit tests for updateTaskListStrings
[DONE] Statistics - could even put a display on the bottom right that populates based on the 'category' list
[DONE] Study ICommand/RelayCommand. Implement command for 'Submit' button. Add logic for submit [DONE] category command
[DONE] check for duplicate categories in category list
[DONE] Verify that inputs are not null/empty, for category or tasks
[Deferred b/c doesn't seem to work w/ objects] Can we actually implement this observable collection properties thing? Add Inotifypropertychanged events to each item, but don't explicitly do it in the model lol. Try using the subclass instead of observable collection:
https://stackoverflow.com/questions/1427471/observablecollection-not-noticing-when-item-in-it-changes-even-with-inotifyprop
[DONE]Add unit tests for null task entries, null time entries, out-of-range times
[DONE] Add validation for category list
[DONE] fix bug: crash after proper task added >> add task w "out of range" endtime. This also happens w/ null category so.. maybe it's just overall improper error handling? Yeah it's overall (happens w/ name too)

-Database Specific-
*Start w/ clean slate in week and days table
Fix unit tests. Separate out the 'add to database' portions so you can pass unit tests.
Add variable/databinding for 'weeks': start date and end date. Maybe even check system time and
pre-populate based on that?
Populate task list from db

-Databases Phase II-
[Probably with separate window]
Delete tasks
Delete categories
View different weeks/populate weekly total. Please refactor updateCurrentWeekDateTimes()
Tie weekly dates to task 

Looks like EF created databases in Microsoft SQL Server (C:\Program Files\Microsoft SQL Server\MSSQL10.SQLEXPRESS\MSSQL\DATA) instead of the local SQL db... how to change? the local ones from asp.net core mvc are added in C:\Users\brand... and have what look like GUIDs in them.

"If a local SQL Express instance is available (installed by default with Visual Studio 2010) then Code First has created the database on that instance"??
https://docs.microsoft.com/en-us/ef/ef6/modeling/code-first/workflows/new-database

[Optional]
Edit/Remove tasks
Add 'Enter' command to text boxes?
TaskItemModel: Make sure input string is valid time
Make DateTime conversion in TaskItemModel PM?
[DONE] ICommand instead of code behind? Not sure if this is more 'best practice'
[DONE] Remove Description field overall, since it takes up space and might not be helpful
After 'Submit', erase all fields and place focus on the first entry
Edit existing tasks
Tasks should display as time blocks

DATABASE (Relational):
Table 1:
[Primary] Task ID | Task Name | Task Duration | [Foreign] Cat ID | [Foreign] Day ID | [Foreign] Week ID 

Table 2:
Day ID | Day

Table 3:
Cat ID | Category 

Table 3:
Week ID | Week dates

